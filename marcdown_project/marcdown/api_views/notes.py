from django.http import JsonResponse
from rest_framework import viewsets
from django.shortcuts import get_object_or_404
from rest_framework.renderers import JSONRenderer

from rest_framework.decorators import action
from rest_framework import status

from django.contrib.auth.models import User
from marcdown.models import Note, Profile
from marcdown.serializers import NoteSerializer

class NoteViewSet(viewsets.ViewSet):
    # get
    def retrieve(self, request, pk=None):
        '''
        Gets the note corresponding to the given id,
        and responds with its description and content
        '''
        queryset = Note.objects.all()
        note = get_object_or_404(queryset, id=pk)
        serializer = NoteSerializer(note)
        return JsonResponse(serializer.data)
    
    # post (public = True, readonly = False, sharers = [])
    # needs auth
    def create(self, request):
        '''
        Creates an empty note with the given parameters
        '''
        user = request.user
        if user.is_authenticated:
            data = request.data
            note = Note(
                owner=user.profile,
                public=data.get("public", True),
                read_only=data.get("readOnly", False),
                content=data.get("content", ""),
            )

            note.save()

            note.parse_title()
            note.parse_tags()

            bad_sharers = []
            for sharer_name in data.get("sharedWith", []):
                try:
                    sharer = User.objects.get(username=sharer_name).profile
                    note.sharers.add(sharer)
                except:
                    bad_sharers.append(sharer_name)
            note.save()
            return JsonResponse(status=status.HTTP_200_OK, data={"status" : "true", "id": note.id, "badSharerNames" : bad_sharers})
        else:
            return JsonResponse(status=status.HTTP_401_UNAUTHORIZED, data={"status" : "false", "message" : "Authentication is required"})
            pass
    
    # update (public, readonly, sharers)
    # needs auth
    def update(self, request, pk=None):
        '''
        Updates the given note with the provided parameters
        '''
        user = request.user
        if user.is_authenticated:
            data = request.data
            queryset = Note.objects.all()
            note = get_object_or_404(queryset, id=pk)

            if note.allow_update_from_user(user.profile):
                note.public = data.get("public", note.public)
                note.read_only = data.get("readOnly", note.read_only)
                new_sharers_names = data.get("sharedWith", None)
                if new_sharers_names:
                    note.sharers.set([])

                    bad_sharers = []
                    for sharer_name in new_sharers_names:
                        try:
                            sharer = User.objects.get(username=sharer_name).profile
                            note.sharers.add(sharer)
                        except:
                            bad_sharers.append(sharer_name)
                note.save()
                return JsonResponse(status=status.HTTP_200_OK, data={"status" : "true", "badSharerNames" : bad_sharers})
            else:
                return JsonResponse(status=status.HTTP_403_FORBIDDEN, data={"status" : "false", "message" : "You are not allowed to edit this note"})
        else:
            return JsonResponse(status=status.HTTP_401_UNAUTHORIZED, data={"status" : "false", "message" : "Authentication is required"})

    # patch (diff)
    # needs auth
    def patch(self, request, pk=None):
        '''
        Updates the content of the given note using the provided patch
        (generated by diff_match_patch library)
        '''
        user = request.user
        if user.is_authenticated:
            data = request.data
            queryset = Note.objects.all()
            note = get_object_or_404(queryset, id=pk)

            if note.allow_update_from_user(user.profile):
                diff = data.get("diff", None)
                if diff:
                    if not note.update(diff):
                        return JsonResponse(status=status.HTTP_422_UNPROCESSABLE_ENTITY, data={"status" : "false", "message" : "Given diff could not be applied"})
                    else:
                        return JsonResponse(status=status.HTTP_200_OK, data={})
                else:
                    return JsonResponse(status=status.HTTP_400_BAD_REQUEST, data={"status" : "false", "message" : "Missing `diff` data in request"})
            else:
                return JsonResponse(status=status.HTTP_403_FORBIDDEN, data={"status" : "false", "message" : "You are not allowed to edit this note"})
        else:
            return JsonResponse(status=status.HTTP_401_UNAUTHORIZED, data={"status" : "false", "message" : "Authentication is required"})
    
    def destroy(self, request, pk=None):
        '''
        Deletes the given note
        '''
        user = request.user
        if user.is_authenticated:
            data = request.data
            queryset = Note.objects.all()
            note = get_object_or_404(queryset, id=pk)

            if user.profile == note.owner:
                note.delete()
                return JsonResponse(status=status.HTTP_200_OK)
            else:
                return JsonResponse(status=status.HTTP_403_FORBIDDEN, data={"status" : "false", "message" : "You are not allowed to edit this note"})
        else:
            return JsonResponse(status=status.HTTP_401_UNAUTHORIZED, data={"status" : "false", "message" : "Authentication is required"})